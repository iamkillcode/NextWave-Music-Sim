rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    // NexTube videos collection - server-side validation with rate limiting
    match /nexttube_videos/{videoId} {
      // Anyone can read videos
      allow read: if true;
      
      // Only authenticated users can create videos, and only for themselves
      // Note: Additional rate-limiting (cooldown, daily cap, duplicates) enforced by Cloud Function
      allow create: if isSignedIn() 
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.keys().hasAll(['ownerId', 'songId', 'type', 'title', 'createdAt'])
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.title.size() <= 200
        && request.resource.data.type in ['official', 'lyrics', 'live']
        && request.resource.data.createdAt is timestamp
        // Prevent obvious spam: normalizedTitle field required
        && request.resource.data.keys().hasAll(['normalizedTitle'])
        && request.resource.data.normalizedTitle is string;
      
      // Only owner can update their own videos (limited fields - no changing core data)
      allow update: if isOwner(resource.data.ownerId)
        && !request.resource.data.diff(resource.data).affectedKeys()
           .hasAny(['ownerId', 'songId', 'type', 'createdAt', 'title', 'normalizedTitle']);
      
      // Only owner can delete their own videos
      allow delete: if isOwner(resource.data.ownerId);
    }

    // Chat conversations - only participants can access
    match /chat_conversations/{conversationId} {
      // Read: Only if user is a participant
      allow read: if isSignedIn() 
        && request.auth.uid in resource.data.participants;
      
      // Create: Only if user is one of the participants (max 2 participants for DMs)
      allow create: if isSignedIn() 
        && request.auth.uid in request.resource.data.participants
        && request.resource.data.participants.size() == 2
        && request.resource.data.keys().hasAll(['participants', 'participantNames', 'unreadCount', 'isTyping']);
      
      // Update: Only participants can update (for typing indicators, unread counts, etc.)
      allow update: if isSignedIn() 
        && request.auth.uid in resource.data.participants;
      
      // Delete: Not allowed (conversations should be blocked, not deleted)
      allow delete: if false;
      
      // Messages archive subcollection
      match /messagesArchive/{messageId} {
        // Read: Only if user is a conversation participant
        allow read: if isSignedIn() 
          && request.auth.uid in get(/databases/$(database)/documents/chat_conversations/$(conversationId)).data.participants;
        
        // Create: Only if user is a participant and is the sender
        allow create: if isSignedIn() 
          && request.auth.uid in get(/databases/$(database)/documents/chat_conversations/$(conversationId)).data.participants
          && request.resource.data.senderId == request.auth.uid;
        
        // Update: Only sender can update (for reactions)
        allow update: if isSignedIn() 
          && request.auth.uid in get(/databases/$(database)/documents/chat_conversations/$(conversationId)).data.participants;
        
        // Delete: Not allowed
        allow delete: if false;
      }
    }
    
    // Comments collection - public read, authenticated write
    match /comments/{commentId} {
      // Anyone can read comments (unless hidden by moderator)
      allow read: if true;
      
      // Only authenticated users can create comments
      allow create: if isSignedIn() 
        && request.resource.data.authorId == request.auth.uid
        && request.resource.data.keys().hasAll(['authorId', 'content', 'timestamp', 'contextType', 'contextId'])
        && request.resource.data.content is string
        && request.resource.data.content.size() > 0
        && request.resource.data.content.size() <= 500
        && request.resource.data.contextType in ['video', 'post', 'chart', 'album'];
      
      // Only author can update their own comments (for editing or deletion)
      allow update: if isOwner(resource.data.authorId);
      
      // Only author can delete their own comments
      allow delete: if isOwner(resource.data.authorId);
    }

    // Poke system rules (in players collection)
    // Note: Pokes are stored as arrays in player documents: sentPokes and receivedPokes
    // The general player rules allow authenticated users to update their own poke arrays

    // WakandaZon marketplace listings - public read, owner write
    match /wakandazon_listings/{listingId} {
      // Anyone can read listings
      allow read: if true;
      
      // Only authenticated users can create listings for themselves
      // Requires at least 100 fame to sell songs
      allow create: if isSignedIn() 
        && request.resource.data.sellerId == request.auth.uid
        && get(/databases/$(database)/documents/players/$(request.auth.uid)).data.currentFame >= 100
        && request.resource.data.keys().hasAll(['sellerId', 'sellerName', 'songTitle', 'genre', 'quality', 'price', 'status', 'listedAt'])
        && request.resource.data.status == 'active'
        && request.resource.data.price is int
        && request.resource.data.price > 0
        && request.resource.data.price <= 10000000;
      
      // Sellers cannot update listings directly (only Cloud Functions can mark as sold/cancelled)
      // Prevent client-side status changes to avoid exploits
      allow update: if false;
      
      // Only seller can delete their own active listings
      // NOTE: Cancellations should use the Cloud Function instead
      allow delete: if isOwner(resource.data.sellerId) 
        && resource.data.status == 'active';
    }

    // WakandaZon purchases - read only for participants, write only by Cloud Functions
    match /wakandazon_purchases/{purchaseId} {
      // Only buyer or seller can read purchase records
      allow read: if isSignedIn() 
        && (request.auth.uid == resource.data.buyerId 
            || request.auth.uid == resource.data.sellerId);
      
      // Purchases can only be created by Cloud Functions (server-side)
      // Clients cannot create purchases directly to prevent money exploits
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Beefs/Banter collection - read for participants, write only by Cloud Functions
    match /beefs/{beefId} {
      // Users can only read beefs they're involved in
      allow read: if isSignedIn() 
        && (request.auth.uid == resource.data.instigatorId 
            || request.auth.uid == resource.data.targetId);
      
      // Beefs can only be created/updated by Cloud Functions (server-side)
      // Prevents fame manipulation and ensures proper beef mechanics
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Players collection - read public, write restricted
    match /players/{playerId} {
      // Anyone can read player profiles (for leaderboards, charts, etc.)
      allow read: if true;
      
      // Players can update their own profile, but NOT money, fame, or follower fields
      // These can only be changed by Cloud Functions to prevent exploits
      allow update: if isOwner(playerId)
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['money', 'echoXFollowers', 'echoXFollowedBy']);
      
      // Allow creation (for new user registration)
      allow create: if isSignedIn() && request.auth.uid == playerId;
      
      // No deletion of player accounts via client
      allow delete: if false;
    }

    // Default rules for other collections (temporary - update before Nov 11, 2025)
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 11, 11);
    }
  }
}