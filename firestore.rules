rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    // NexTube videos collection - server-side validation with rate limiting
    match /nexttube_videos/{videoId} {
      // Anyone can read videos
      allow read: if true;
      
      // Only authenticated users can create videos, and only for themselves
      // Note: Additional rate-limiting (cooldown, daily cap, duplicates) enforced by Cloud Function
      allow create: if isSignedIn() 
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.keys().hasAll(['ownerId', 'songId', 'type', 'title', 'createdAt'])
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.title.size() <= 200
        && request.resource.data.type in ['official', 'lyrics', 'live']
        && request.resource.data.createdAt is timestamp
        // Prevent obvious spam: normalizedTitle field required
        && request.resource.data.keys().hasAll(['normalizedTitle'])
        && request.resource.data.normalizedTitle is string;
      
      // Only owner can update their own videos (limited fields - no changing core data)
      allow update: if isOwner(resource.data.ownerId)
        && !request.resource.data.diff(resource.data).affectedKeys()
           .hasAny(['ownerId', 'songId', 'type', 'createdAt', 'title', 'normalizedTitle']);
      
      // Only owner can delete their own videos
      allow delete: if isOwner(resource.data.ownerId);
    }

    // Default rules for other collections (temporary - update before Nov 11, 2025)
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 11, 11);
    }
  }
}