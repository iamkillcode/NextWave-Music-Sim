name: Build Mobile Apps (APK & IPA)

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          if [ -n "$GOOGLE_SERVICES_JSON" ] && [ "$GOOGLE_SERVICES_JSON" != "null" ]; then
            echo "$GOOGLE_SERVICES_JSON" | base64 -d > android/app/google-services.json 2>/dev/null || {
              echo "⚠️ Failed to decode GOOGLE_SERVICES_JSON, using placeholder"
              echo '{"project_info":{"project_number":"","project_id":"nextwave-placeholder"}}' > android/app/google-services.json
            }
            if [ -f android/app/google-services.json ]; then
              echo "✅ google-services.json created successfully"
            fi
          else
            echo "⚠️ GOOGLE_SERVICES_JSON secret not found, using placeholder"
            echo '{"project_info":{"project_number":"","project_id":"nextwave-placeholder"}}' > android/app/google-services.json
          fi

      - name: Build APK (Release)
        run: flutter build apk --release --split-per-abi

      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-x86_64-release.apk
          retention-days: 30

      - name: Build Summary
        run: |
          echo "### 🎉 Android Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### APK Files Generated:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "build/app/outputs/flutter-apk" ]; then
            echo "**Release APKs:**" >> $GITHUB_STEP_SUMMARY
            ls -lh build/app/outputs/flutter-apk/app-*-release.apk 2>/dev/null | awk '{print "- " $9 " (" $5 ")"}' >> $GITHUB_STEP_SUMMARY || echo "- No release APKs found" >> $GITHUB_STEP_SUMMARY
          fi

  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

      - name: Decode GoogleService-Info.plist
        env:
          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          if [ -n "$GOOGLE_SERVICE_INFO_PLIST" ] && [ "$GOOGLE_SERVICE_INFO_PLIST" != "null" ]; then
            echo "$GOOGLE_SERVICE_INFO_PLIST" | base64 -d > ios/Runner/GoogleService-Info.plist 2>/dev/null || {
              echo "⚠️ Failed to decode GOOGLE_SERVICE_INFO_PLIST, using placeholder"
              cat > ios/Runner/GoogleService-Info.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>placeholder</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.placeholder</string>
            <key>API_KEY</key>
            <string>placeholder</string>
            <key>GCM_SENDER_ID</key>
            <string>000000000000</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.nextwave.musicgame</string>
            <key>PROJECT_ID</key>
            <string>nextwave-placeholder</string>
            <key>STORAGE_BUCKET</key>
            <string>nextwave-placeholder.appspot.com</string>
            <key>IS_ADS_ENABLED</key>
            <false/>
            <key>IS_ANALYTICS_ENABLED</key>
            <false/>
            <key>IS_APPINVITE_ENABLED</key>
            <false/>
            <key>IS_GCM_ENABLED</key>
            <true/>
            <key>IS_SIGNIN_ENABLED</key>
            <true/>
            <key>GOOGLE_APP_ID</key>
            <string>1:000000000000:ios:0000000000000000000000</string>
          </dict>
          </plist>
          EOF
            }
            if [ -f ios/Runner/GoogleService-Info.plist ]; then
              echo "✅ GoogleService-Info.plist created successfully"
            fi
          else
            echo "⚠️ GOOGLE_SERVICE_INFO_PLIST secret not found, using placeholder"
            cat > ios/Runner/GoogleService-Info.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>placeholder</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.placeholder</string>
            <key>API_KEY</key>
            <string>placeholder</string>
            <key>GCM_SENDER_ID</key>
            <string>000000000000</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.nextwave.musicgame</string>
            <key>PROJECT_ID</key>
            <string>nextwave-placeholder</string>
            <key>STORAGE_BUCKET</key>
            <string>nextwave-placeholder.appspot.com</string>
            <key>IS_ADS_ENABLED</key>
            <false/>
            <key>IS_ANALYTICS_ENABLED</key>
            <false/>
            <key>IS_APPINVITE_ENABLED</key>
            <false/>
            <key>IS_GCM_ENABLED</key>
            <true/>
            <key>IS_SIGNIN_ENABLED</key>
            <true/>
            <key>GOOGLE_APP_ID</key>
            <string>1:000000000000:ios:0000000000000000000000</string>
          </dict>
          </plist>
          EOF
          fi

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Build iOS (No Codesign)
        run: flutter build ios --release --no-codesign

      - name: Create IPA
        run: |
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload/
          zip -r ../../../nextwave-ios-release.ipa Payload
          cd ../../..
          ls -lh nextwave-ios-release.ipa

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: nextwave-ios-release.ipa
          retention-days: 30

      - name: Build Summary
        run: |
          echo "### 🎉 iOS Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**IPA File Generated:**" >> $GITHUB_STEP_SUMMARY
          ls -lh nextwave-ios-release.ipa | awk '{print "- " $9 " (" $5 ")"}' >> $GITHUB_STEP_SUMMARY

  create-release-info:
    name: Create Release Info
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: //' | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Download Android APKs
        uses: actions/download-artifact@v4
        with:
          name: android-apks
          path: ./artifacts/android

      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts/ios

      - name: Create Release Info
        run: |
          echo "## 📱 NextWave v${{ steps.version.outputs.version }} - Mobile Builds" > release-info.md
          echo "" >> release-info.md
          echo "**Build Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> release-info.md
          echo "**Commit:** ${{ github.sha }}" >> release-info.md
          echo "**Branch:** ${{ github.ref_name }}" >> release-info.md
          echo "" >> release-info.md
          echo "### 📦 Android APKs" >> release-info.md
          echo "" >> release-info.md
          ls -lh ./artifacts/android/*.apk | awk '{print "- " $9 " (" $5 ")"}' >> release-info.md
          echo "" >> release-info.md
          echo "### 🍎 iOS IPA" >> release-info.md
          echo "" >> release-info.md
          ls -lh ./artifacts/ios/*.ipa | awk '{print "- " $9 " (" $5 ")"}' >> release-info.md
          echo "" >> release-info.md
          echo "### 📝 Installation Notes" >> release-info.md
          echo "" >> release-info.md
          echo "**Android:**" >> release-info.md
          echo "- Download the APK for your device architecture" >> release-info.md
          echo "- arm64-v8a: Modern 64-bit devices (recommended)" >> release-info.md
          echo "- armeabi-v7a: Older 32-bit devices" >> release-info.md
          echo "- x86_64: Android emulators and some tablets" >> release-info.md
          echo "" >> release-info.md
          echo "**iOS:**" >> release-info.md
          echo "- Unsigned build - requires sideloading" >> release-info.md
          echo "- Use AltStore, Sideloadly, or similar tool" >> release-info.md
          echo "- Or sign with your own Apple Developer account" >> release-info.md
          
          cat release-info.md

      - name: Upload Release Info
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release-info.md
          retention-days: 30

      - name: Build Summary
        run: |
          echo "### 🎉 All Builds Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat release-info.md >> $GITHUB_STEP_SUMMARY
